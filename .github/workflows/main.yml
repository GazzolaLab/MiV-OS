name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '**' ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ubuntu-latest, macos-latest, windows-latest] # Run macos tests if really required, since they charge 10 times more for macos
        include:
          - os: ubuntu-latest
            path: ~/.cache/pip
          - os: macos-latest
            path: ~/Library/Caches/pip
          - os: windows-latest
            path: ~\AppData\Local\pip\Cache
      defaults:
        run:
          shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.2.0
        with:
          python-version: ${{ matrix.python-version }}
      - uses: FedericoCarboni/setup-ffmpeg@v2
        id: setup-ffmpeg
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
          poetry config virtualenvs.in-project true
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          source $VENV
          poetry lock --no-update
          poetry install -E "docs experiment"
      # Test MiV-OS using pytest
      - name: Run tests
        run: |
<<<<<<< HEAD
<<<<<<< HEAD
          make ci
||||||| parent of adf8021 (Adopt pyproject.toml and poetry packaging system)
          make ci
=======
          make test
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> adf8021 (Adopt pyproject.toml and poetry packaging system)

||||||| parent of 4aa15ba (fix:main yml codecoverage)
          pytest

=======
          pytest

>>>>>>> 4aa15ba (fix:main yml codecoverage)
||||||| parent of ef09392 (Use GitHub action for poetry installation)

=======
>>>>>>> ef09392 (Use GitHub action for poetry installation)
||||||| parent of 2550c2a (update: github action config)
=======
  report-coverage:  # Report coverage from python 3.8 and mac-os. May change later
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.8"]
        os: [macos-latest]
        include:
          - os: macos-latest
            path: ~/Library/Caches/pip
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.2.0
        with:
          python-version: ${{ matrix.python-version }}
      - uses: FedericoCarboni/setup-ffmpeg@v2
        id: setup-ffmpeg
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
          poetry config virtualenvs.in-project true
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
<<<<<<< HEAD
          poetry config virtualenvs.in-project true
<<<<<<< HEAD
<<<<<<< HEAD
          poetry install
>>>>>>> 2550c2a (update: github action config)
||||||| parent of 3e4af02 (update experiment dependencies installation)
          poetry install
=======
||||||| parent of e32dd97 (CI: lock befofre dependency installation)
=======
||||||| parent of 2220e8a (update windows poetry ci)
          poetry config virtualenvs.in-project true
=======
          source $VENV
>>>>>>> 2220e8a (update windows poetry ci)
          poetry lock --no-update
>>>>>>> e32dd97 (CI: lock befofre dependency installation)
          poetry install -E "docs experiment"
>>>>>>> 3e4af02 (update experiment dependencies installation)
      # Set environment variables for coverage test. Coverage test is done using python 3.8
      - name: Run style checks
        run: |
          make check-codestyle
      - name: Test MiV-OS using pytest
        if: startsWith(runner.os, 'macOS')
        run: |
          make test_ci
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          flags: unittests
          name: codecov-umbrella
          verbose: true
