# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push request
# events for the master branch, and pull request events for all branches.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '**' ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }} #ubuntu-latest

    strategy:
      matrix:
        os:  [ubuntu-latest, macos-latest, windows-latest] # Run macos tests if really required, since they charge 10 times more for macos
        python-version: ["3.8", "3.9", "3.10"]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Ref: https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # You can test your matrix by printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      # Cache the pip requirmenets for other tests. If requirements cached use them to speed up the build.
      # Ref: https://github.com/actions/cache/blob/main/examples.md#python---pip
      - name: Cache pip Linux
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache pip MacOS
        uses: actions/cache@v2
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache pip Windows
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Windows')
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          echo update pip
          python -m pip install --upgrade pip
          echo update requirments
          pip install -r requirements.txt
          echo update test requirements
          pip install -r tests/requirements.txt

      # Runs a single command using the runners shell
      - name: Welcome message
        run: echo Hello, world! Welcome MiV-OS Build, lets start testing!

      # Formatting test with black and flake8
      - name: Black and Flake8 formatting tests
        if: startsWith(runner.os, 'macOS')
        run: |
          if [[ "${{ matrix.python-version }}" == "3.8" ]]; then
            black --version
            black --check miv tests
            flake8 --version
            flake8 miv tests
          fi

      # General PyTest for all matrix strategy
      - name: PyTest and MyPy
        run: |
          make ci

      # Set environment variables for coverage test. Coverage test is done using python 3.8
      # Test MiV-OS using pytest
      - name: Test MiV-OS using pytest
        if: startsWith(runner.os, 'macOS')
        run: |
          if [[ "${{ matrix.python-version }}" == "3.8" ]]; then
            echo "CODECOV_TOKEN=4e35faf2-dc6b-442c-99f3-90d088ccd9f6" >> $GITHUB_ENV
            python3 -m pytest --cov=MiV-OS --cov-report=xml
            codecov
          fi
