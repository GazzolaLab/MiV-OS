name: CI

on:
  push:
    branches: [ main, update-** ]
  pull_request:
    branches: [ '**' ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.8"]
        os: [macos-latest]  #, ubuntu-latest]
        include:
          - os: macos-latest
            path: ~/Library/Caches/pip
          #- os: ubuntu-latest
          #  path: ~/.cache/pip
          #- os: windows-latest
          #  path: ~\AppData\Local\pip\Cache
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - uses: mpi4py/setup-mpi@v1
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.6.1
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - uses: FedericoCarboni/setup-ffmpeg@v2
        id: setup-ffmpeg
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Set up cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ matrix.path }}
      #     key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          #poetry lock --no-update
          poetry install --all-extras --with=algorithmExtension,sortingExtension,mpi
      # Test MiV-OS using pytest
      - name: Run tests
        run: |
          source $VENV
          make test
  report-coverage:  # Report coverage from python 3.8 and mac-os. May change later
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.8"]
        os: [macos-latest]
        include:
          - os: macos-latest
            path: ~/Library/Caches/pip
    steps:
      - uses: actions/checkout@v3
      - uses: mpi4py/setup-mpi@v1
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.6.1
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - uses: FedericoCarboni/setup-ffmpeg@v2
        id: setup-ffmpeg
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Set up cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ matrix.path }}
      #     key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          #poetry lock --no-update
          poetry install --all-extras --with=algorithmExtension,sortingExtension,mpi
      # Set environment variables for coverage test. Coverage test is done using python 3.8
      - name: Run style checks
        run: |
          make check-codestyle
      - name: Test MiV-OS using pytest
        if: startsWith(runner.os, 'macOS')
        run: |
          make test_ci
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          flags: unittests
          name: codecov-umbrella
          verbose: true
